import unittest
from unittest.mock import MagicMock, patch, call
from PyQt5.QtWidgets import QApplication, QTextEdit, QMessageBox
from Project_Admin.ui_edit_tnc import EditTncWidget  

class TestEditTncWidget(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.app = QApplication([])  # Create a QApplication instance

    def setUp(self):
        self.widget = EditTncWidget()

    def tearDown(self):
        self.widget.close()

    def test_set_default_text_with_terms(self):
        # Mocking the database call and its response
        mock_db = MagicMock()
        mock_db.child.return_value.get.return_value.val.return_value = "Sample terms"

        # Patching the db object to use the mock_db
        with patch('Project_Admin.ui_edit_tnc.db', new=mock_db):
            # Call the set_default_text method
            self.widget.set_default_text()

            # Verify that the textEdit contains the expected text
            self.assertEqual(self.widget.textEdit.toPlainText(), "Sample terms")

    def test_set_default_text_no_terms(self):
        # Mocking the database call to return None (no terms found)
        mock_db = MagicMock()
        mock_db.child.return_value.get.return_value.val.return_value = None

        # Patching the db object to use the mock_db
        with patch('Project_Admin.ui_edit_tnc.db', new=mock_db):
            # Call the set_default_text method
            self.widget.set_default_text()

            # Verify that the textEdit contains the expected message
            self.assertEqual(self.widget.textEdit.toPlainText(), "No terms found in the database.")

    def test_upload_data_to_db_success(self):
        # Mocking the textEdit content
        self.widget.textEdit = QTextEdit("Updated terms")

        # Mocking the database call to successfully set data
        mock_db = MagicMock()

        # Patching the db object to use the mock_db
        with patch('Project_Admin.ui_edit_tnc.db', new=mock_db):
            with patch.object(QMessageBox, 'information') as mock_info:
                # Call the upload_data_to_db method
                self.widget.upload_data_to_db()

                # Verify that the database set method was called with the correct data
                mock_db.child.return_value.set.assert_called_once_with("Updated terms")

                # Verify that the success message box was shown
                mock_info.assert_called_once_with(self.widget, "Success", "Data updated successfully!")

    def test_upload_data_to_db_missing_data(self):
        # Mocking the textEdit content
        self.widget.textEdit = QTextEdit("")

        with patch.object(QMessageBox, 'warning') as mock_warning:
            # Call the upload_data_to_db method
            self.widget.upload_data_to_db()

            # Verify that the warning message box was shown
            mock_warning.assert_called_once_with(self.widget, "Missing Data", "Please fill in all fields.")

    def test_upload_data_to_db_failure(self):
        # Mocking the textEdit content
        self.widget.textEdit = QTextEdit("Updated terms")

        # Mocking the database call to raise an exception
        mock_db = MagicMock()
        mock_db.child.return_value.set.side_effect = Exception("Database error")

        # Patching the db object to use the mock_db
        with patch('Project_Admin.ui_edit_tnc.db', new=mock_db):
            with patch.object(QMessageBox, 'critical') as mock_critical:
                # Call the upload_data_to_db method
                self.widget.upload_data_to_db()

                # Verify that the error message box was shown
                mock_critical.assert_called_once_with(self.widget, "Error", "Failed to update data: Database error")

if __name__ == '__main__':
    unittest.main()
